gTypeObject <- list()
for (i in 1:length(arpObject)) {
gTypeObject <- arp2gtypes(arpObject[[i]])
# genindObject <- gtypes2genind(gTypeObject[i])
}
gTypeObject
gTypeObject[1][1]
gTypeObject[[1]][1]
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
arpObject
arpObject[[1]]
arpObject[[2]]
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
# genindObject <- gtypes2genind(gTypeObject[i])
}
gTypeObject
gTypeObject[[1]]
gTypeObject[[2]]
gTypeObject[[3]]
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
}
gTypeObject[[1]]
genindObject[[1]]
genindObject[[2]]
genindObject[[1]]
genindObject[[2]]
genindObject[[1]]@tab
genindObject[[2]]
genindObject[[1]]
genindObject[[2]]
genindObject[[3]]
genindObject[[4]]
genindObject[[5]]
nLoc(genindObject)
nLoc(genindObject[[1]])
genindObject
genindObject@tab[[1]]
genindObject@tab[1]
genindObject
genindObject[1]
genindObject[2]
genindObject[2]@tab
genindObject[[1]]
genindObject[[1]]@tab
genindObject[[1]]
genindObject[[1]]@loc.n.all
nloc(genindObject[[1]]@tab)
genindObject[[1]]@tab
genindObject[[1]]
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
genindObject[[i]]
}
genindObject[[1]]
genindObject[[2]]
genindObject[[3]]
genindObject[[1]]
nloc(genindObject[[1]])
nloc(genindObject[1])
nloc(genindObject[[1]])
nloc(genindObject[[1]])
nloc(genindObject[[1]])
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
}
genindObject
nloc(genindObject[[1]])
nloc(genindObject[1])
library(strataG)
library(adegenet)
genindObject[1]@tab
genindObject[[1]]@tab
nloc(genindObject[[1]]@tab)
genindObject[[1]]@tab
genindObject[[1]]
locNames(genindObject[[1]])
nAll(genindObject[[1]])
nLoc(genindObject[[1]])
alleles(genindObject[[1]])
nAll(genindObject[[1]])
sum(nAll(genindObject[[1]]))
nLoc(genindObject[[1]])
mean(sum(nAll(genindObject[[1]])))
mean(nAll(genindObject[[1]]))
sum(nAll(genindObject[[c(1,2,3,4,5)]]))
sum(nAll(genindObject[[c(1,2)]]))
alleles(genindObject[[1]])
length(alleles(genindObject[[1]]))
sum(alleles(genindObject[[1]]))
sum(nAll(genindObject[[1]]))
nAll(genindObject[[1]])
genindObject[[1]]@tab
genindObject[[1]]@tab
genindObject[[1]]@tab
genindObject[[1]]@tab
nLoc(genindObject[[1]])
alleles(genindObject)
alleles(genindObject[[1]])
length(alleles(genindObject[[1]]))
nAll(genindObject[[1]])
sum(nAll(genindObject[[1]]))
nLoc(genindObject[[1]])
sum(nAll(genindObject[[1]]))
sum(nAll(genindObject[[2]]))
c(sum(nAll(genindObject[[1]])), sum(nAll(genindObject[[2]])))
mean(c(sum(nAll(genindObject[[1]])), sum(nAll(genindObject[[2]]))))
meanAllelevec <- vector()
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
meanAllelevec <- sum(nAll(genindObject[[i]]))
}
meanAllelevec
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
meanAllelevec <- c(sum(nAll(genindObject[[i]])))
}
source("C:/Users/gsalas/Documents/resampling_CIs/Code/Scripts/RaMP_SimulationIntro.R", echo=TRUE)
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
meanAllelevec <- c(sum(nAll(genindObject[[i]])))
}
meanAllelevec
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
meanAllelevec[i] <- c(sum(nAll(genindObject[[i]])))
}
meanAllelevec
mean(Allelevec)
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
mean(Allelevec)
}
Allelevec <- vector()
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
Allelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
mean(Allelevec)
}
mean(Allelevec)
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanAllelevec
nLoc(genindObject[[1]])
nLoc(genindObject[[2]])
rm(list = ls())
library(strataG)
library(adegenet)
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
meanLocivec
meanAllelevec
rm(list = ls())
source("C:/Users/gsalas/Documents/resampling_CIs/Code/Scripts/RaMP_SimulationIntro.R", echo=TRUE)
fscReadParamEst(arpFileslist, sim = 1)
fscReadParamEst(arpFileslist)
rm(list = ls())
library(strataG)
library(adegenet)
# %%%STRATAG APPROACH ----
# Specify the filepath to the Arlequin file in question
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
fscReadParamEst(arpFileslist)
fscReadParamEst(arpFileslist)
fscBlock_microsat(num.loci = 25)
fscBlock_microsat(num.loci = 25, mut.rate = 0)
fscBlock_microsat(arpFileslist, num.loci = 25, mut.rate = 0)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
parObject <- fscReadParamEst(parFilepath)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscReadParamEst(parFilepath)
fscSettingsEst(parFilepath)
fscEstParam(parFilepath)
fscSettingsEst(parFilepath)
fscEstParam(parFilepath)
load("C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscSettingsEst(parFilepath)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscEstParam(parFilepath)
fscSettingsEst(parFilepath)
parObject <- fscReadParamEst(parFilepath)
fscDeme(parFilepath, deme.size = 1000)
fscDeme(parFilepath, deme.size = 1000, num.loci = 25)
arpObject
fscDeme(parFilepath, deme.size )
rm(list = ls())
library(strataG)
library(adegenet)
# %%%STRATAG APPROACH ----
# Specify the filepath to the Arlequin file in question
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
fscDeme(parFilepath, deme.size )
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscDeme(parFilepath, deme.size )
fscDeme(parFilepath)
fscDeme(parFilepath, sample.size = )
genindObject[[1]]
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscDeme(parFilepath, deme.size = 2400)
deme0 <- fscDeme(parFilepath, deme.size = 2400)
fscSettingsDemes(deme0)
demes <- fscSettingsDemes(deme0)
fscBlock_microsat(num.loci = 25, mut.rate = 0)
fscWrite(demes = demes, label ="updatedMSAT_04pop_migLow.par")
fscWrite(demes = demes, genetics = NA, label ="updatedMSAT_04pop_migLow.par")
fscSettingsGenetics(msats)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
fscWrite(demes = demes, genetics = genetics,label ="updatedMSAT_04pop_migLow.par")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
print(str(updatedMSAT_04pop_migLow.params))
rm(list = ls())
library(strataG)
library(adegenet)
# %%%STRATAG APPROACH ----
# Specify the filepath to the Arlequin file in question
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
msats
genetics <- fscSettingsGenetics(msats)
genetics
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
####
# 02/10/2025
####
sim.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck"
sim.wd
rm(sim.wd)
sim.wd
####
# 02/10/2025
####
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck"
phenotype.wd
setwd(phenotype.wd)
getwd
getwd()
2025_01_22_blind_consistency_check
readxl::read_xlsx("2025_01_22_blind_consistency_check.xlsx")
####
# 02/10/2025
####
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
getwd()
read.csv("2025_01_22_blind_consistency_check.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
view(intial_phenotype_measurement_matrix)
View(intial_phenotype_measurement_matrix)
View(intial_phenotype_measurement_matrix)
intial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
View(intial_phenotype_measurement_matrix)
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
View(final_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
dim(initial_phenotype_measurement_matrix)
dim(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
dim(initial_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix[1, 1]
initial_phenotype_measurement_matrix[1, 50]
initial_phenotype_measurement_matrix[1, 23]
initial_phenotype_measurement_matrix[1, 20]
dimnames(initial_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix[1,1]
initial_phenotype_measurement_matrix[1,0]
initial_phenotype_measurement_matrix[,0]
initial_phenotype_measurement_matrix[2,0]
initial_phenotype_measurement_matrix[2,2]
initial_phenotype_measurement_matrix[2,2] == final_phenotype_measurement_matrix[2,2]
initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
dim(initial_phenotype_measurement_matrix)
dim(initial_phenotype_measurement_matrix)[2]
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix[1]), ncol = dim(initial_phenotype_measurement_matrix)[2])
results_matrix
initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
final_phenotype_measurement_matrix [,2] <- initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
final_phenotype_measurement_matrix [,2] <- initial_phenotype_measurement_matrix[,2] == final_phenotype_measurement_matrix[,2]
final_phenotype_measurement_matrix[,2]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
final_phenotype_measurement_matrix[5,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[5,6] == final_phenotype_measurement_matrix[5,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] = final_phenotype_measurement_matrix[,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix[1]), ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
View(initial_phenotype_measurement_matrix)
View(final_phenotype_measurement_matrix)
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
source("~/PhenotypeConsistencyCheck/ConsistencyCheck.R", echo=TRUE)
