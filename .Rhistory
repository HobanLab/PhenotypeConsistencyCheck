colnames(results_matrix)
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
# lines 41 - 73  act as a check to identify individuals where the amount (number of times) of measurements taken the first time do not match up with the amount of measurements take the second time. This applies to both continuous and discrete columns. The comparison method we are trying to do that leads up to the percent change calculation will not work when you attempt to compare two different amounts of measurements.
# first create vectors that will store the true/false statements across the rows for each continuous column
templeaflengths_ <- vector(length = nrow(results_matrix))
tempnutlengths_ <- vector(length = nrow(results_matrix))
tempnutwidth_ <- vector(length = nrow(results_matrix))
tempcatkinlength_ <- vector(length = nrow(results_matrix))
templeafletcount <- vector(length = nrow(results_matrix))
templeafscarangle <- vector(length = nrow(results_matrix))
templeafscarangle
nrow(results_matrix)
is.matrix(results_matrix)
# this for loop iterates through each row (specimen) of a range of 5 columns (traits) and takes the sum of measurements that are NA. This is done for the dataset that measured individuals the first time and second time. This outputs a true or false statement and is placed in the ith position of the vector.
for (i in 1:nrow(results_matrix)) {
templeaflengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,16:20]))==sum(is.na(initial_phenotype_measurement_df[i,16:20]))
tempnutlengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,22:26]))==sum(is.na(initial_phenotype_measurement_df[i,22:26]))
tempnutwidth_[i] <- sum(is.na(final_phenotype_measurement_df[i,27:31]))==sum(is.na(initial_phenotype_measurement_df[i,27:31]))
tempcatkinlength_[i] <- sum(is.na(final_phenotype_measurement_df[i,32:36]))==sum(is.na(initial_phenotype_measurement_df[i,32:36]))
templeafletcount[i] <- sum(is.na(final_phenotype_measurement_df[i,38:42]))==sum(is.na(initial_phenotype_measurement_df[i,38:42]))
templeafscarangle[i] <- sum(is.na(final_phenotype_measurement_df[i,43:47]))==sum(is.na(initial_phenotype_measurement_df[i,43:47]))
}
templeafscarangle
templeafletcount
tempcatkinlength_
tempnutwidth_
tempnutlengths_
templeaflengths_
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
sameLeaflengths_
samenutlengths
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
sameleafscarangle
sameleafletcountamounts
samecatkinlength
samenutwidth
samenutlengths
sameLeaflengths_
# for loop that iterates through the various columns and calculates the percent change
for (i in sameLeaflengths_) {
results_matrix[i, 16:20] <- 100*(sort(as.double(final_phenotype_measurement_df[i,16:20]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE)
}
results_matrix[, 16:20]
sameLeaflengths_
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
sameleafscarangle
templeafscarangle
# Since we measured each individual twice, we want to compare measurements if the number of times we measured match up for each trait. This for loop iterates through each row (specimen) of a range of 5 columns (traits) and takes the sum of measurements that are NA. This is done for the dataset that measured individuals the first time and second time. This outputs a true or false statement and is placed in the ith position of the vector.
for (i in 1:nrow(results_matrix)) {
templeaflengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,16:20]))==sum(is.na(initial_phenotype_measurement_df[i,16:20]))
tempnutlengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,22:26]))==sum(is.na(initial_phenotype_measurement_df[i,22:26]))
tempnutwidth_[i] <- sum(is.na(final_phenotype_measurement_df[i,27:31]))==sum(is.na(initial_phenotype_measurement_df[i,27:31]))
tempcatkinlength_[i] <- sum(is.na(final_phenotype_measurement_df[i,32:36]))==sum(is.na(initial_phenotype_measurement_df[i,32:36]))
templeafletcount[i] <- sum(is.na(final_phenotype_measurement_df[i,38:42]))==sum(is.na(initial_phenotype_measurement_df[i,38:42]))
templeafscarangle[i] <- sum(is.na(final_phenotype_measurement_df[i,43:47]))==sum(is.na(initial_phenotype_measurement_df[i,43:47]))
}
templeafscarangle
templeafletcount
tempcatkinlength_
tempnutwidth_
tempnutlengths_
templeaflengths_
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
sameleafscarangle
sameleafletcountamounts
samecatkinlength
samenutwidth
samenutlengths
sameLeaflengths_
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
sameleafscarangle
# for loop that iterates through the various columns and calculates the percent change
for (i in sameLeaflengths_) {
results_matrix[i, 16:20] <- 100*(sort(as.double(final_phenotype_measurement_df[i,16:20]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE)
}
for (i in samenutlengths) {
results_matrix[i, 22:26] <- 100*(sort(as.double(final_phenotype_measurement_df[i,22:26]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE)
}
for (i in samenutwidth) {
results_matrix[i, 27:31] <- 100*(sort(as.double(final_phenotype_measurement_df[i,27:31]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,27:31]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i, 27:31]), na.last = TRUE)
}
for (i in samecatkinlength) {
results_matrix[i, 32:36] <- 100*(sort(as.double(final_phenotype_measurement_df[i,32:36]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE)
}
for (i in sameleafscarangle) {
results_matrix[i, 43:47] <- 100*(sort(as.double(final_phenotype_measurement_df[i,43:47]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE)
}
results_matrix[, 43:47]
results_matrix[, 32:36]
results_df[[col_index]
]
library(dplyr)
# Set work directory and create objects ----
phenotype.wd <- "~/GitHub/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
# convert characters which R does not recognize to NA ----
# this object is a data frame that takes in the spreadsheet that measured traits for 30 herbarium specimens the first time.
initial_phenotype_measurement_df <- read.csv(paste0(phenotype.wd,"Consistency_Check_Sheets/V2_Protocol/2025_03_05_Updated_Spreadsheet_Blindcheck_1.csv"), na.strings = c("Unsure/in between", "Evenly split", "Trait not present", "Trait not present ", "Trait not measurable/ obscured or image quality issue", "Trait to early to measure", "Trait too early to measure", "Trait not measurable/obscured or image quality issue"), stringsAsFactors = FALSE) %>%
rename(
Lenticel_shape = Lenticel.shape.0..Most.or.all.lenticels.are.small..round..white..and.abundant..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Moderate.number.of.lenticels.are.small..round..white..and.abundant.lenticels..with.patchy.distribution..where.moderate.is.20.50...If.elongated..the.elongation.is.parallel.to.the.branch..2..More.than.50..of.lenticels.are.large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Dormant_terminal_bud = Dormant.terminal.bud.If.the.terminal.bud.is.growing.DO.NOT.measure..Choose.one.of.the.following.0..Elongated..slender..conical.and.tan.colored.1..Broadest.at.the.base..less.elongated..and.slightly.green.colored.2..Stout..pyramid.shaped..green.or.yellow.green.in.color.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Thickness_of_twig = Thickness.of.twig.Stout..thick..hulky..Slender..thin..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Color_of_twig = Color.of.twig.Dark.olive.green.to.red.brown.Tan.to.brown.Tan.or.light.green.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Hair_texture_of_twig = Hair.Texture.of.twig.Some..or.no..hairs.Patchy.hairs.Abundant.hairs.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Leaf_scar = Leaf.scar.0..Top.edge.of.most.leaf.scars.is.straight.or.slightly.arched.1..Top.edge.of.some.leaf.scars.has.a.small.descending..V..shaped.notched..an.arch..and.side.edges.are.lobed.2..Top.edge.of.most.or.all.leaf.scars.has.a.clear.descending..V..shaped.notch.and.side.edges.are.lobed.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Nut_shape_and_texture = Nut.shape.texture.if.present..without.husk....0..Cylindrical.nut..round.in.cross.section..with.thin..sharp.corrugations..The.suture.seam.is.not.easily.distinguished.from.the.longitudinal.ridges.1..Slightly.asymmetrical.nut..with.noticeable.valleys.between.longitudinal.ridges.2..Asymmetric..diamond.shaped.or.flattened.nut..with.dull.or.sparse.corrugations..The.suture.seam.is.easily.identified.and.forms.the.widest.part.of.the.nut.s.body.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Pith_color = Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_leaves = Leaves.0..Most.leaves.less.than.45.72.cm.long.1..Many.leaves.45.72.cm.or.longer.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_catkins = Catkin.length.score.0...Shorter.than.11.43.cm.1..Betweeen.11.43...13.97.cm..2..Longer.than.13.97.cm.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue
)
final_phenotype_measurement_df <- read.csv(paste0(phenotype.wd,"Consistency_Check_Sheets/V2_Protocol/2025_03_20_Updated_Spreadsheet_Blindcheck_2.csv"), na.strings = c("Unsure/in between", "Evenly split", "Trait not present", "Trait not present ", "Trait not measurable/ obscured or image quality issue", "Trait to early to measure", "Trait too early to measure", "Trait not measurable/obscured or image quality issue"), stringsAsFactors = FALSE) %>%
rename(
Lenticel_shape = Lenticel.shape.0..Most.or.all.lenticels.are.small..round..white..and.abundant..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Moderate.number.of.lenticels.are.small..round..white..and.abundant.lenticels..with.patchy.distribution..where.moderate.is.20.50...If.elongated..the.elongation.is.parallel.to.the.branch..2..More.than.50..of.lenticels.are.large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Dormant_terminal_bud = Dormant.terminal.bud.If.the.terminal.bud.is.growing.DO.NOT.measure..Choose.one.of.the.following.0..Elongated..slender..conical.and.tan.colored.1..Broadest.at.the.base..less.elongated..and.slightly.green.colored.2..Stout..pyramid.shaped..green.or.yellow.green.in.color.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Thickness_of_twig = Thickness.of.twig.Stout..thick..hulky..Slender..thin..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Color_of_twig = Color.of.twig.Dark.olive.green.to.red.brown.Tan.to.brown.Tan.or.light.green.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Hair_texture_of_twig = Hair.Texture.of.twig.Some..or.no..hairs.Patchy.hairs.Abundant.hairs.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Leaf_scar = Leaf.scar.0..Top.edge.of.most.leaf.scars.is.straight.or.slightly.arched.1..Top.edge.of.some.leaf.scars.has.a.small.descending..V..shaped.notched..an.arch..and.side.edges.are.lobed.2..Top.edge.of.most.or.all.leaf.scars.has.a.clear.descending..V..shaped.notch.and.side.edges.are.lobed.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Nut_shape_and_texture = Nut.shape.texture.if.present..without.husk....0..Cylindrical.nut..round.in.cross.section..with.thin..sharp.corrugations..The.suture.seam.is.not.easily.distinguished.from.the.longitudinal.ridges.1..Slightly.asymmetrical.nut..with.noticeable.valleys.between.longitudinal.ridges.2..Asymmetric..diamond.shaped.or.flattened.nut..with.dull.or.sparse.corrugations..The.suture.seam.is.easily.identified.and.forms.the.widest.part.of.the.nut.s.body.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Pith_color = Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_leaves = Leaves.0..Most.leaves.less.than.45.72.cm.long.1..Many.leaves.45.72.cm.or.longer.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_catkins = Catkin.length.score.0...Shorter.than.11.43.cm.1..Betweeen.11.43...13.97.cm..2..Longer.than.13.97.cm.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue
)
# remove empty rows from both data sets ----
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(16:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(16:999),]
# group the data types into different objects so they are easier to reference later on ----
# ordinal columns
ordinal_columns <- c(6:15,21,37,48)
# discrete columns
discrete_columns <- c(38:42)
# continuous columns
continuous_columns <- c(16:20,22:36,43:47)
# Create a matrix that will store the percent change and percent of true statements and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# lines 64 - 87  act as a check to identify individuals where the amount (number of times) of measurements taken the first time do not match up with the amount of measurements take the second time. This applies to both continuous and discrete columns. The comparison method we are trying to do that leads up to the percent change calculation will not work when you attempt to compare two different amounts of measurements.
# first create vectors that will store the true/false statements across the rows for each continuous column
templeaflengths_ <- vector(length = nrow(results_matrix))
tempnutlengths_ <- vector(length = nrow(results_matrix))
tempnutwidth_ <- vector(length = nrow(results_matrix))
tempcatkinlength_ <- vector(length = nrow(results_matrix))
templeafletcount <- vector(length = nrow(results_matrix))
templeafscarangle <- vector(length = nrow(results_matrix))
# Since we measured each individual twice, we want to compare measurements if the number of times we measured match up for each trait. This for loop iterates through each row (specimen) of a range of 5 columns (traits) and takes the sum of measurements that are NA. This is done for the dataset that measured individuals the first time and second time. This outputs a true or false statement and is placed in the ith position of the vector.
for (i in 1:nrow(results_matrix)) {
templeaflengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,16:20]))==sum(is.na(initial_phenotype_measurement_df[i,16:20]))
tempnutlengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,22:26]))==sum(is.na(initial_phenotype_measurement_df[i,22:26]))
tempnutwidth_[i] <- sum(is.na(final_phenotype_measurement_df[i,27:31]))==sum(is.na(initial_phenotype_measurement_df[i,27:31]))
tempcatkinlength_[i] <- sum(is.na(final_phenotype_measurement_df[i,32:36]))==sum(is.na(initial_phenotype_measurement_df[i,32:36]))
templeafletcount[i] <- sum(is.na(final_phenotype_measurement_df[i,38:42]))==sum(is.na(initial_phenotype_measurement_df[i,38:42]))
templeafscarangle[i] <- sum(is.na(final_phenotype_measurement_df[i,43:47]))==sum(is.na(initial_phenotype_measurement_df[i,43:47]))
}
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
# lines 89 - 112: for loop that iterates through the various columns and calculates the percent change
for (i in sameLeaflengths_) {
results_matrix[i, 16:20] <- 100*(sort(as.double(final_phenotype_measurement_df[i,16:20]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE)
}
for (i in samenutlengths) {
results_matrix[i, 22:26] <- 100*(sort(as.double(final_phenotype_measurement_df[i,22:26]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE)
}
for (i in samenutwidth) {
results_matrix[i, 27:31] <- 100*(sort(as.double(final_phenotype_measurement_df[i,27:31]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,27:31]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i, 27:31]), na.last = TRUE)
}
for (i in samecatkinlength) {
results_matrix[i, 32:36] <- 100*(sort(as.double(final_phenotype_measurement_df[i,32:36]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE)
}
for (i in sameleafscarangle) {
results_matrix[i, 43:47] <- 100*(sort(as.double(final_phenotype_measurement_df[i,43:47]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE)
}
# iterate through each row after sorting discrete columns in ascending order and use true false to compare the leaflet counts
for (i in sameleafletcountamounts) {
results_matrix[i, discrete_columns] <- sort(as.double(initial_phenotype_measurement_df[i,discrete_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,discrete_columns]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a data frame.
results_df <- data.frame(results_matrix)
# table of continouus percent change ONLY
continuous_results_df <- results_df[, continuous_columns]
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,c(ordinal_columns, discrete_columns)] <- results_df[,c(ordinal_columns,discrete_columns)] == 1
final_results_df <- results_df[,sort(c(continuous_columns,discrete_columns,ordinal_columns))]
# save the csv file of the results
# write.csv(final_results_df, file = paste0(phenotype.wd, "Consistency_Check_Results/Comparisons/consistencycheckResults_usingV2protocolSORTED.csv"))
# approaches to creating the table that calculates the percentage of TRUE values that matched after comparing the columns of both tables
# create a data frame that will store the calculations of the percentage for orinal & disrecete columns
categorical_table_results <- as.data.frame(matrix(nrow = length(ordinal_columns)+length(discrete_columns), ncol = 2))
categorical_table_results
# calculate the percentage for ordinal values. this for loop iterates through the discrete columns and is indexed into the
for (i in 1:length(discrete_columns)) {
# Get the actual column index
col_index <- discrete_columns[i]
# Store column name
categorical_table_results[i+12,1] <- colnames(results_df)[col_index]
categorical_table_results[i+12,2] <- 100 * (sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]])))
}
col_index
discrete_columns[i]
results_df
results_df[[col_index]]
is.data.frame(results_df)
categorical_table_results
# calculate the average percentage. this is different than the previous percent change calculation we did because for each trait
# continuousTable_results percent change
continuous_table_Average_percentChange <- as.data.frame(matrix(nrow = length(continuous_columns), ncol = 2))
for (i in 1:length(continuous_columns)) {
col_index <- continuous_columns[i]  # Get the actual column index
continuous_table_Average_percentChange[i,1] <- colnames(results_df)[col_index]  # Store column name
continuous_table_Average_percentChange[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
continuous_table_Average_percentChange
continuous_table_Average_percentChange
#ordinal columns for both initial and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
best_categorical_traits <- c(6, 7, 9, 21, 33)
thickness_column <- c("Slender" = 0, "Stout"= 1)
color_column <- c("Dark olive gree to red brown" = 0, "Tan to brown" = 1, "Tan or light green" = 2)
trichomes_column <- c("Some (or no) hairs" = 0, "Patchy hairs" = 1, "Abundant hairs" = 2)
trichomes_column
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
initial_phenotype_measurement_df$Thickness_of_twig
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
#ordinal columns for both initial and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
best_categorical_traits <- c(6, 7, 9, 21, 33)
thickness_column <- c("Slender" = 0, "Stout"= 1)
color_column <- c("Dark olive gree to red brown" = 0, "Tan to brown" = 1, "Tan or light green" = 2)
trichomes_column <- c("Some (or no) hairs" = 0, "Patchy hairs" = 1, "Abundant hairs" = 2)
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
thickness_column <- c("Slender" = 0, "Stout"= 1)
color_column <- c("Dark olive gree to red brown" = 0, "Tan to brown" = 1, "Tan or light green" = 2)
trichomes_column <- c("Some (or no) hairs" = 0, "Patchy hairs" = 1, "Abundant hairs" = 2)
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
initial_phenotype_measurement_df
initial_phenotype_measurement_df
initial_phenotype_measurement_df$Color_of_twig
initial_phenotype_measurement_df$Hair_texture_of_twig
final_phenotype_measurement_df$Thickness_of_twig <- thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
final_phenotype_measurement_df$Color_of_twig <- color_column[final_phenotype_measurement_df$Color_of_twig]
final_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[final_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig <- thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
final_phenotype_measurement_df$Color_of_twig <- color_column[final_phenotype_measurement_df$Color_of_twig]
final_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[final_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig
thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Total_score
initial_phenotype_measurement_df$Total_score <- rowSums(initial_phenotype_measurement_df[,ordinal_columns], na.rm = TRUE)
initial_phenotype_measurement_df$Total_score
final_phenotype_measurement_df$Total_score
final_phenotype_measurement_df$Total_score <- rowSums(final_phenotype_measurement_df[,ordinal_columns], na.rm = TRUE)
final_phenotype_measurement_df$Total_score
# ordinal columns for both initial and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
ordinal_columns
best_categorical_traits <- c(6, 7, 9, 21, 33)
best_categorical_traits
# updated ordinal columns ordinal columns for both spread and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
ordinal_columns
initial_phenotype_measurement_df[ordinal_columns]
# updated ordinal columns ordinal columns for both spread and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
ordinal_columns
initial_phenotype_measurement_df[ordinal_columns]
library(dplyr)
# Set work directory and create objects ----
phenotype.wd <- "~/GitHub/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
# convert characters which R does not recognize to NA ----
# this object is a data frame that takes in the spreadsheet that measured traits for 30 herbarium specimens the first time.
initial_phenotype_measurement_df <- read.csv(paste0(phenotype.wd,"Consistency_Check_Sheets/V2_Protocol/2025_03_05_Updated_Spreadsheet_Blindcheck_1.csv"), na.strings = c("Unsure/in between", "Evenly split", "Trait not present", "Trait not present ", "Trait not measurable/ obscured or image quality issue", "Trait to early to measure", "Trait too early to measure", "Trait not measurable/obscured or image quality issue"), stringsAsFactors = FALSE) %>%
rename(
Lenticel_shape = Lenticel.shape.0..Most.or.all.lenticels.are.small..round..white..and.abundant..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Moderate.number.of.lenticels.are.small..round..white..and.abundant.lenticels..with.patchy.distribution..where.moderate.is.20.50...If.elongated..the.elongation.is.parallel.to.the.branch..2..More.than.50..of.lenticels.are.large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Dormant_terminal_bud = Dormant.terminal.bud.If.the.terminal.bud.is.growing.DO.NOT.measure..Choose.one.of.the.following.0..Elongated..slender..conical.and.tan.colored.1..Broadest.at.the.base..less.elongated..and.slightly.green.colored.2..Stout..pyramid.shaped..green.or.yellow.green.in.color.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Thickness_of_twig = Thickness.of.twig.Stout..thick..hulky..Slender..thin..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Color_of_twig = Color.of.twig.Dark.olive.green.to.red.brown.Tan.to.brown.Tan.or.light.green.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Hair_texture_of_twig = Hair.Texture.of.twig.Some..or.no..hairs.Patchy.hairs.Abundant.hairs.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Leaf_scar = Leaf.scar.0..Top.edge.of.most.leaf.scars.is.straight.or.slightly.arched.1..Top.edge.of.some.leaf.scars.has.a.small.descending..V..shaped.notched..an.arch..and.side.edges.are.lobed.2..Top.edge.of.most.or.all.leaf.scars.has.a.clear.descending..V..shaped.notch.and.side.edges.are.lobed.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Nut_shape_and_texture = Nut.shape.texture.if.present..without.husk....0..Cylindrical.nut..round.in.cross.section..with.thin..sharp.corrugations..The.suture.seam.is.not.easily.distinguished.from.the.longitudinal.ridges.1..Slightly.asymmetrical.nut..with.noticeable.valleys.between.longitudinal.ridges.2..Asymmetric..diamond.shaped.or.flattened.nut..with.dull.or.sparse.corrugations..The.suture.seam.is.easily.identified.and.forms.the.widest.part.of.the.nut.s.body.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Pith_color = Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_leaves = Leaves.0..Most.leaves.less.than.45.72.cm.long.1..Many.leaves.45.72.cm.or.longer.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_catkins = Catkin.length.score.0...Shorter.than.11.43.cm.1..Betweeen.11.43...13.97.cm..2..Longer.than.13.97.cm.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue
)
final_phenotype_measurement_df <- read.csv(paste0(phenotype.wd,"Consistency_Check_Sheets/V2_Protocol/2025_03_20_Updated_Spreadsheet_Blindcheck_2.csv"), na.strings = c("Unsure/in between", "Evenly split", "Trait not present", "Trait not present ", "Trait not measurable/ obscured or image quality issue", "Trait to early to measure", "Trait too early to measure", "Trait not measurable/obscured or image quality issue"), stringsAsFactors = FALSE) %>%
rename(
Lenticel_shape = Lenticel.shape.0..Most.or.all.lenticels.are.small..round..white..and.abundant..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Moderate.number.of.lenticels.are.small..round..white..and.abundant.lenticels..with.patchy.distribution..where.moderate.is.20.50...If.elongated..the.elongation.is.parallel.to.the.branch..2..More.than.50..of.lenticels.are.large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Dormant_terminal_bud = Dormant.terminal.bud.If.the.terminal.bud.is.growing.DO.NOT.measure..Choose.one.of.the.following.0..Elongated..slender..conical.and.tan.colored.1..Broadest.at.the.base..less.elongated..and.slightly.green.colored.2..Stout..pyramid.shaped..green.or.yellow.green.in.color.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Thickness_of_twig = Thickness.of.twig.Stout..thick..hulky..Slender..thin..Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Color_of_twig = Color.of.twig.Dark.olive.green.to.red.brown.Tan.to.brown.Tan.or.light.green.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue,
Hair_texture_of_twig = Hair.Texture.of.twig.Some..or.no..hairs.Patchy.hairs.Abundant.hairs.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Leaf_scar = Leaf.scar.0..Top.edge.of.most.leaf.scars.is.straight.or.slightly.arched.1..Top.edge.of.some.leaf.scars.has.a.small.descending..V..shaped.notched..an.arch..and.side.edges.are.lobed.2..Top.edge.of.most.or.all.leaf.scars.has.a.clear.descending..V..shaped.notch.and.side.edges.are.lobed.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Nut_shape_and_texture = Nut.shape.texture.if.present..without.husk....0..Cylindrical.nut..round.in.cross.section..with.thin..sharp.corrugations..The.suture.seam.is.not.easily.distinguished.from.the.longitudinal.ridges.1..Slightly.asymmetrical.nut..with.noticeable.valleys.between.longitudinal.ridges.2..Asymmetric..diamond.shaped.or.flattened.nut..with.dull.or.sparse.corrugations..The.suture.seam.is.easily.identified.and.forms.the.widest.part.of.the.nut.s.body.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure.,
Pith_color = Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown.Unsure.in.between.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_leaves = Leaves.0..Most.leaves.less.than.45.72.cm.long.1..Many.leaves.45.72.cm.or.longer.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue.Trait.to.early.to.measure,
Length_of_catkins = Catkin.length.score.0...Shorter.than.11.43.cm.1..Betweeen.11.43...13.97.cm..2..Longer.than.13.97.cm.Evenly.split.Trait.not.present.Trait.not.measurable..obscured.or.image.quality.issue
)
# remove empty rows from both data sets ----
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(16:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(16:999),]
# group the data types into different objects so they are easier to reference later on ----
# ordinal columns
ordinal_columns <- c(6:15,21,37,48)
# discrete columns
discrete_columns <- c(38:42)
# continuous columns
continuous_columns <- c(16:20,22:36,43:47)
# Create a matrix that will store the percent change and percent of true statements and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# lines 64 - 87  act as a check to identify individuals where the amount (number of times) of measurements taken the first time do not match up with the amount of measurements take the second time. This applies to both continuous and discrete columns. The comparison method we are trying to do that leads up to the percent change calculation will not work when you attempt to compare two different amounts of measurements.
# first create vectors that will store the true/false statements across the rows for each continuous column
templeaflengths_ <- vector(length = nrow(results_matrix))
tempnutlengths_ <- vector(length = nrow(results_matrix))
tempnutwidth_ <- vector(length = nrow(results_matrix))
tempcatkinlength_ <- vector(length = nrow(results_matrix))
templeafletcount <- vector(length = nrow(results_matrix))
templeafscarangle <- vector(length = nrow(results_matrix))
# Since we measured each individual twice, we want to compare measurements if the number of times we measured match up for each trait. This for loop iterates through each row (specimen) of a range of 5 columns (traits) and takes the sum of measurements that are NA. This is done for the dataset that measured individuals the first time and second time. This outputs a true or false statement and is placed in the ith position of the vector.
for (i in 1:nrow(results_matrix)) {
templeaflengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,16:20]))==sum(is.na(initial_phenotype_measurement_df[i,16:20]))
tempnutlengths_[i] <- sum(is.na(final_phenotype_measurement_df[i,22:26]))==sum(is.na(initial_phenotype_measurement_df[i,22:26]))
tempnutwidth_[i] <- sum(is.na(final_phenotype_measurement_df[i,27:31]))==sum(is.na(initial_phenotype_measurement_df[i,27:31]))
tempcatkinlength_[i] <- sum(is.na(final_phenotype_measurement_df[i,32:36]))==sum(is.na(initial_phenotype_measurement_df[i,32:36]))
templeafletcount[i] <- sum(is.na(final_phenotype_measurement_df[i,38:42]))==sum(is.na(initial_phenotype_measurement_df[i,38:42]))
templeafscarangle[i] <- sum(is.na(final_phenotype_measurement_df[i,43:47]))==sum(is.na(initial_phenotype_measurement_df[i,43:47]))
}
# identify which vector position we see the amounts match up
sameLeaflengths_ <- which(templeaflengths_ == TRUE)
samenutlengths <- which(tempnutlengths_ == TRUE)
samenutwidth <- which(tempnutwidth_ == TRUE)
samecatkinlength <- which(tempcatkinlength_ == TRUE)
sameleafletcountamounts <- which(templeafletcount == TRUE)
sameleafscarangle <- which(templeafscarangle == TRUE)
# lines 89 - 112: for loop that iterates through the various columns and calculates the percent change
for (i in sameLeaflengths_) {
results_matrix[i, 16:20] <- 100*(sort(as.double(final_phenotype_measurement_df[i,16:20]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,16:20]), na.last = TRUE)
}
for (i in samenutlengths) {
results_matrix[i, 22:26] <- 100*(sort(as.double(final_phenotype_measurement_df[i,22:26]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,22:26]), na.last = TRUE)
}
for (i in samenutwidth) {
results_matrix[i, 27:31] <- 100*(sort(as.double(final_phenotype_measurement_df[i,27:31]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,27:31]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i, 27:31]), na.last = TRUE)
}
for (i in samecatkinlength) {
results_matrix[i, 32:36] <- 100*(sort(as.double(final_phenotype_measurement_df[i,32:36]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,32:36]), na.last = TRUE)
}
for (i in sameleafscarangle) {
results_matrix[i, 43:47] <- 100*(sort(as.double(final_phenotype_measurement_df[i,43:47]), na.last = TRUE) - sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE))/sort(as.double(initial_phenotype_measurement_df[i,43:47]), na.last = TRUE)
}
# iterate through each row after sorting discrete columns in ascending order and use true false to compare the leaflet counts
for (i in sameleafletcountamounts) {
results_matrix[i, discrete_columns] <- sort(as.double(initial_phenotype_measurement_df[i,discrete_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,discrete_columns]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a data frame.
results_df <- data.frame(results_matrix)
# table of continouus percent change ONLY
continuous_results_df <- results_df[, continuous_columns]
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,c(ordinal_columns, discrete_columns)] <- results_df[,c(ordinal_columns,discrete_columns)] == 1
final_results_df <- results_df[,sort(c(continuous_columns,discrete_columns,ordinal_columns))]
# save the csv file of the results
# write.csv(final_results_df, file = paste0(phenotype.wd, "Consistency_Check_Results/Comparisons/consistencycheckResults_usingV2protocolSORTED.csv"))
# approaches to creating the table that calculates the percentage of TRUE values that matched after comparing the columns of both tables
# create a data frame that will store the calculations of the percentage for orinal & disrecete columns
categorical_table_results <- as.data.frame(matrix(nrow = length(ordinal_columns)+length(discrete_columns), ncol = 2))
# calculate the percentage for ordinal values. this for loop iterates through the discrete columns object and outputs the percentage calculations into the positions 13 - 17 in the categorical_table_results dataframe
for (j in 1:length(ordinal_columns)) {
if (j < 13){
col_index <- ordinal_columns[j]  # Get the actual column index
categorical_table_results[j,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[j,2] <- 100 * (sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]])))
}
else {
categorical_table_results[j+5,1] <- colnames(results_df)[col_index+11]
categorical_table_results[j+5,2] <- 100 * (sum(results_df[[col_index+11]], na.rm = TRUE) / sum(!is.na(results_df[[col_index+11]])))
}
}
# calculate the percentage for discrete values. this for loop iterates through the discrete columns object and outputs the percentage calculations into the positions 13 - 17 in the categorical_table_results dataframe
for (i in 1:length(discrete_columns)) {
# Get the actual column index
col_index <- discrete_columns[i]
# Store column name starting at the 13th row
categorical_table_results[i+12,1] <- colnames(results_df)[col_index]
# store the percentage calculation
categorical_table_results[i+12,2] <- 100 * (sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]])))
}
categorical_table_results
# write.csv(categorical_table_results,paste0(phenotype.wd, "Consistency_Check_Results/Stats/Percentages/categoricalpercentages_usingV2protocolSORTED.csv"))
# calculate the average percentage. this is different than the previous percent change calculation we did because for each trait, we will calculate the mean of the percent change across individuals.
# continuousTable_results percent change
continuous_table_Average_percentChange <- as.data.frame(matrix(nrow = length(continuous_columns), ncol = 2))
# calculate the average percent change. this for loop iterates through the continuous columns object and outputs the percent change calculations into the ith position of the categorical_table_results dataframe
for (i in 1:length(continuous_columns)) {
col_index <- continuous_columns[i]  # Get the actual column index
continuous_table_Average_percentChange[i,1] <- colnames(results_df)[col_index]  # Store column name
continuous_table_Average_percentChange[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
# write.csv(continuous_table_Average_percentChange,paste0(phenotype.wd, "Consistency_Check_Results/Stats/Average_Percent_Change/continuous_Average_percentChange_usingV2protocolSORTED.csv"))
initial_phenotype_measurement_df
initial_phenotype_measurement_df[ordinal_columns]
# ordinal columns ordinal columns for both spread and final phenotype spreadsheets
ordinal_columns <- c(6:11,13,15,21,37)
initial_phenotype_measurement_df[ordinal_columns]
best_categorical_traits <- c(6, 7, 9, 21, 33)
thickness_column <- c("Slender" = 0, "Stout"= 1)
color_column <- c("Dark olive gree to red brown" = 0, "Tan to brown" = 1, "Tan or light green" = 2)
trichomes_column <- c("Some (or no) hairs" = 0, "Patchy hairs" = 1, "Abundant hairs" = 2)
thickness_column
color_column
trichomes_column
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Thickness_of_twig
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig <- thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
final_phenotype_measurement_df$Color_of_twig <- color_column[final_phenotype_measurement_df$Color_of_twig]
final_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[final_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig
# update the score column to not include the score output in the random sampling
ordinal_columns_withoutScorecolumn <- c(6:11,13,15,21,37)
ordinal_columns_withoutScorecolumn
# convert the twig characterisitcs to scores
thickness_column <- c("Slender" = 0, "Stout"= 1)
color_column <- c("Dark olive gree to red brown" = 0, "Tan to brown" = 1, "Tan or light green" = 2)
trichomes_column <- c("Some (or no) hairs" = 0, "Patchy hairs" = 1, "Abundant hairs" = 2)
thickness_column
color_column
trichomes_column
thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Thickness_of_twig
thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
# convert the
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig <- thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
final_phenotype_measurement_df$Color_of_twig <- color_column[final_phenotype_measurement_df$Color_of_twig]
final_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[final_phenotype_measurement_df$Hair_texture_of_twig]
thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Thickness_of_twig
thickness_column
# lines 184 - 190: each value indexed in initial_phenotype_df is looked up in each twig characteristic vector and returned as the corresponding value.
initial_phenotype_measurement_df$Thickness_of_twig <- thickness_column[initial_phenotype_measurement_df$Thickness_of_twig]
initial_phenotype_measurement_df$Color_of_twig <- color_column[initial_phenotype_measurement_df$Color_of_twig]
initial_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[initial_phenotype_measurement_df$Hair_texture_of_twig]
final_phenotype_measurement_df$Thickness_of_twig <- thickness_column[final_phenotype_measurement_df$Thickness_of_twig]
final_phenotype_measurement_df$Color_of_twig <- color_column[final_phenotype_measurement_df$Color_of_twig]
final_phenotype_measurement_df$Hair_texture_of_twig <- trichomes_column[final_phenotype_measurement_df$Hair_texture_of_twig]
initial_phenotype_measurement_df$Total_score <- rowSums(initial_phenotype_measurement_df[,ordinal_columns_withoutScorecolumn], na.rm = TRUE)
initial_phenotype_measurement_df$Total_score
final_phenotype_measurement_df$Total_score <- rowSums(final_phenotype_measurement_df[,ordinal_columns_withoutScorecolumn], na.rm = TRUE)
final_phenotype_measurement_df
final_phenotype_measurement_df$Total_score
Specimen <- vector(length = 15)
for (i in 1:15) {
Specimen[i] <- paste0("Specimen ", i)
}
Specimen
initial_ordinal_phenotypemeasurements <- matrix(nrow =length(1:nrow(initial_phenotype_measurement_df[1])),
ncol = 1, dimnames = list(Specimen,
c("Mean score")))
initial_ordinal_phenotypemeasurements
initial_phenotype_measurement_df$Total_score <- rowSums(initial_phenotype_measurement_df[,ordinal_columns_withoutScorecolumn], na.rm = TRUE)
initial_phenotype_measurement_df$Total_score
rowSums(initial_phenotype_measurement_df[,ordinal_columns_withoutScorecolumn], na.rm = TRUE)
