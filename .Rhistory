results_matrix[,ordinal_columns]
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
?factor
results_matrix
as.logical(results_matrix)
results_matrix == 1
results_matrix[,ordinal_columns] == 1
results_matrix[,ordinal_columns]
results_matrix
results_matrix[,ordinal_columns] <- as.logical(results_matrix[,ordinal_columns])
results_matrix
as.logical(results_matrix[,ordinal_columns])
results_matrix[,ordinal_columns] == 1
results_matrix[,ordinal_columns] <- results_matrix[,ordinal_columns] == 1
results_matrix
results_matrix[,ordinal_columns] == 1
data.frame(results_matrix)
results_df <- data.frame(results_matrix)
as.logical(as.integer(results_matrix[,ordinal_columns]))
results_matrix
is.data.frame(results_df)
as.integer(as.logical(results_df$Leaf..1.length..cm.))
results_df$Leaf..1.length..cm.
results_df[,ordinal_columns]<- as.integer(as.logical(results_df[,ordinal_columns]))
results_df[,ordinal_columns]<- as.logical(as.integer(results_df[,ordinal_columns]))
results_df$Lenticel.shape.0..Small..round..white..and.abundant.lenticels..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Small..round..white..and.abundant.lenticels..with.patchy.distribution..If.elongated..the.elongation.is.parallel.to.the.branch..2..Large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch.<- as.logical(as.integer(results_df$Lenticel.shape.0..Small..round..white..and.abundant.lenticels..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Small..round..white..and.abundant.lenticels..with.patchy.distribution..If.elongated..the.elongation.is.parallel.to.the.branch..2..Large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch.))
results_df$Lenticel.shape.0..Small..round..white..and.abundant.lenticels..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Small..round..white..and.abundant.lenticels..with.patchy.distribution..If.elongated..the.elongation.is.parallel.to.the.branch..2..Large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch.
results_df[,6]
results_df
as.logical(as.integer(results_df[,6]))
results_df[,6]<- as.logical(as.integer(results_df[,6]))
results_df[,6]
results_df[,ordinal_columns]<- as.logical(as.integer(results_df[,ordinal_columns]))
results_df[,11:16]<- as.logical(as.integer(results_df[,11:16]))
results_df[,11:16]
results_df[,11:16] == 1
results_df[,11:16]<- results_df[,11:16] == 1
results_df[,11:16]
results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# check the column names of both matrices
colnames(results_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
results_df
initial_phenotype_measurement_df
final_phenotype_measurement_df
results_df
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# check the column names of both matrices
colnames(results_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
results_matrix
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df
is.data.frame()
is.data.frame(results_df)
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
na.omit(results_df)
na.omit(results_df$Leaf..5.length..cm.)
results_df
results_df[,21]
colSums(results_df)
colSums(results_df[,ordinal_columns])
colSums(results_df[,continuous_columns])
results_df[,continuous_columns]
results_df[,continuous_columns]==NA
na.omit(results_df[,continuous_columns]==NA)
results_df[,continuous_columns] <- na.omit(results_df[,continuous_columns]==NA)
results_df[,continuous_columns]
na.omit(results_df)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
sum(initial_phenotype_measurement_df, na.rm = T))
sum(initial_phenotype_measurement_df, na.rm = T)
sum(as.numeric(initial_phenotype_measurement_df), na.rm = T)
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
initial_phenotype_measurement_df
sum(initial_phenotype_measurement_df)
?sum()
sum(initial_phenotype_measurement_df[,17], na.rm = T)
sum(initial_phenotype_measurement_df[,17:21], na.rm = T)
sum(initial_phenotype_measurement_df[,17], na.rm = T)
is.na(initial_phenotype_measurement_df)
sum(is.na(initial_phenotype_measurement_df))
noNAtemp <- subset(initial_phenotype_measurement_df,)
noNAtemp <- subset(initial_phenotype_measurement_df,
subset = !sum(is.na(initial_phenotype_measurement_df)))
noNAtemp
nrow(noNAtemp)
noNAtemp <- subset(initial_phenotype_measurement_df,
subset = !sum(is.na(initial_phenotype_measurement_df$Catkin.presence..Y.N.)))
noNAtemp
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
noNAtemp <- subset(initial_phenotype_measurement_df,
subset = !sum(is.na(initial_phenotype_measurement_df[,ordinal_columns])))
noNAtemp
noNAtemp <- subset(initial_phenotype_measurement_df,
subset = !sum(is.na(initial_phenotype_measurement_df$Lenticel.shape.0..Small..round..white..and.abundant.lenticels..evenly.distributed..If.elongated..the.elongation.is.perpendicular.to.the.branch..1..Small..round..white..and.abundant.lenticels..with.patchy.distribution..If.elongated..the.elongation.is.parallel.to.the.branch..2..Large..tan..corky.lenticels.with.a.patchy.distribution..Many.are.dash.shaped.and.elongated.parallel.to.the.branch., initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown)))
noNAtemp <- subset(initial_phenotype_measurement_df,
subset = !sum(is.na(initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown)))
noNAtemp
is.na(initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown)
sum(is.na(initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown))
sum(initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown, na.rm = T)
sum(initial_phenotype_measurement_df$Pith.color.0..Dark.chocolate.brown.1..Light.brown.2..tan.honey.brown, na.rm = T)
na.omit(as.vector(as.matrix(final_phenotype_measurement_df)))
final matrix <- na.omit(as.vector(as.matrix(final_phenotype_measurement_df)))
final_matrix <- na.omit(as.vector(as.matrix(final_phenotype_measurement_df)))
initial_matrix <- na.omit(as.vector(as.matrix(initial_phenotype_measurement_df)))
intersect(initial_matrix, final_matrix)
lapply(final_phenotype_measurement_df,final_phenotype_measurement_df[!is.na(final_phenotype_measurement_df)])
lapply(final_phenotype_measurement_df,function(x),x[!is.na(x)])])
lapply(final_phenotype_measurement_df,function(x),x[!is.na(x)])])
lapply(final_phenotype_measurement_df,function(x),x[!is.na(x)])
lapply(final_phenotype_measurement_df,x[!is.na(x)])
lapply(final_phenotype_measurement_df,final_phenotype_measurement_df[!is.na(final_phenotype_measurement_df)])
!is.na(final_phenotype_measurement_df)
rm.na(!is.na(final_phenotype_measurement_df))
sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[1,33:37]), na.last = TRUE)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
results_matrix
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
results_df[,continuous_columns]
is.na(results_df)
na.omit(as.vector(as.matrix(results_df)))
temp_vector <- as.vector(as.matrix(results_df))
sum(temp_vector, na.rm = T)
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
initial_vector_temp
sum(initial_vector_temp, na.rm = T)
temp_vector <- as.vector(as.numeric(as.matrix(results_df)))
sum(initial_vector_temp, na.rm = T)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
results_matrix[,ordinal_columns]
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_matrix
results_matrix[,ordinal_columns] == 1
results_matrix[,continuous_columns]
print(results_matrix)
results[,ordinal_columns] <- results_matrix[,ordinal_columns] == 1
results_matrix[,ordinal_columns] <- results_matrix[,ordinal_columns] == 1
results_matrix
results_matrix[,ordinal_columns] == 1
results_matrix[,ordinal_columns] <- results_matrix[,ordinal_columns] == 1
results_matrix[,ordinal_columns]
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# check the column names of both matrices
colnames(results_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
print(results_df)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
# ordinal columns
ordinal_columns <- c(6,7,11:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
initial_phenotype_measurement_df
final_phenotype_measurement_df
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
initial_phenotype_measurement_df
columns
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
# check the column names of both matrices
colnames(results_matrix)
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# check the column names of both matrices
colnames(results_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# # data frame to matrix
# initial_phenotype_measurement_matrix <-  data.matrix(initial_phenotype_measurement_df)
# final_phenotype_measurement_matrix <- data.matrix(final_phenotype_measurement_df)
initial_vector_temp <- as.vector(as.matrix(initial_phenotype_measurement_df))
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
columns<-c(colnames(final_phenotype_measurement_df))
colnames(results_matrix) <- columns
# check the column names of both matrices
colnames(results_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
results_matrix
# testing the measurement differences for continuous data
results_matrix[4, 33:37] <- sort(as.double(initial_phenotype_measurement_df[4,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[4,33:37]), na.last = TRUE)
results_matrix
# loop through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
results_df <- data.frame(results_matrix)
results_df
results_df[,ordinal_columns]<- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
is.na(results_df) <- NULL
print(is.na(results_df) <- NULL)
results_df
results_df[results_df == NA] <- NULL
results_df
results_df[results_df == NA]
rm.na(results_df[results_df == NA])
sum(rm.na(results_df[results_df == NA]))
sum(results_df[results_df == NA])
results_df[results_df == NA]
sum(results_df[results_df == NA])
sum(results_df, na.rm = T)
sum(results_df)
sum(results_df, na.rm = T)
sum(final_phenotype_measurement_df, na.rm = T)
sum(final_phenotype_measurement_df, na.rm = T)
sum(as.numeric(final_phenotype_measurement_df, na.rm = T))
sum(as.double(final_phenotype_measurement_df, na.rm = T))
sum(as.double(unlist(final_phenotype_measurement_df, na.rm = T))
)
sum(as.double(unlist(final_phenotype_measurement_df)), na.rm = T)
na.omit(results_df)
?complete.cases()
results_df[complete.cases(results_df),]
results_df[rowSums(is.na(resutls_df[ ,ordinal_columns])) == 0, ]
results_df[rowSums(is.na(results_df[ ,ordinal_columns])) == 0, ]
write.csv(consistencycheckResults, file = phenotype.wd)
write.csv(consistencycheckResults, file = phenotype.wd)
write.csv(results_df, file = phenotype.wd)
write.csv2(results_df, file = phenotype.wd)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck"
write.csv(results_df, file = phenotype.wd)
