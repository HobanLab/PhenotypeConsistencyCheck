for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
results_df
results_df[,ordinal_columns]
results_df[,ordinal_columns]
categorical_table_results
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
initial_phenotype_measurement_df[,17] - final_phenotype_measurement_df[,17]
initial_phenotype_measurement_df[,17:21] - final_phenotype_measurement_df[,17:21]
for (i in 1:29) {
for (j in continuous_columns) {
results_matrix[i,j]<- initial_phenotype_measurement_matrix[i,j] - final_phenotype_measurement_matrix[i,j]
}
}
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results[i,1]
categorical_table_results[i,]
categorical_table_results[i,1]
categorical_table_results[i,2]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
initial_phenotype_measurement_df
View(initial_phenotype_measurement_df)
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
results_df
sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE)
i
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
initial_phenotype_measurement_df[,ordinal_columns]
sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE)
colnames(initial_phenotype_measurement_df)
colnames(initial_phenotype_measurement_df[ordinal_columns])
sort(initial_phenotype_measurement_df[i,17:21], na.last = TRUE)
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
col_index <- ordinal_columns[i]
i
colnames(results_df)[1]
categorical_table_results
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
sum(results_df[[col_index]], na.rm = TRUE)
i
sum(!is.na(results_df[[col_index]]))
19/29
sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
sum(results_df[[col_index]], na.rm = TRUE)
col_index
um(results_df[[col_index]], na.rm = TRUE)
sum(results_df[[col_index]], na.rm = TRUE)
12/29
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
results_df
results_df
colnames(results_df)
sort(initial_phenotype_measurement_df[1,39:43], na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,39:43]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[,39:43]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,39:43]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[1,39:43]), na.last = TRUE)
length(ordinal_columns)
nrow(initial_phenotype_measurement_df)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38:44)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
for (i in 1:nrow(initial_phenotype_measurement_df)) {
results_matrix[i,39:43] <- sort(as.double(initial_phenotype_measurement_df[i,39:43]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,39:43]), na.last = TRUE)
}
results_matrix[i,39:43]
results_matrix[,39:43]
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
categorical_table_results
sort(as.double(initial_phenotype_measurement_df[i,39:43]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,39:43]), na.last = TRUE)
# nominal columns
nominal_columns <- c(39:43)
sort(as.double(initial_phenotype_measurement_df[i,nominal_columns])
, na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[2,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[3,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[4,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[4,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[5,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[5,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[6,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[6,nominal_columns]), na.last = TRUE)
nominal_columns <-
for (i in 1:nrow(initial_phenotype_measurement_df)) {
results_matrix[i,nominal_columns] <- sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
}
results_matrix
results_matrix[,nominal_columns]
results_matrix[i,nominal_columns]
results_matrix[,nominal_columns]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38,44)
# nominal columns
nominal_columns <- c(39:43)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
# double check the column names appear in the results matrix
colnames(results_matrix)
sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[2,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_df <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_df <- read.csv("2025_01_22_blind_consistency_check.csv")
# remove rows from dataset
initial_phenotype_measurement_df <- initial_phenotype_measurement_df[-c(30:999),]
final_phenotype_measurement_df <- final_phenotype_measurement_df[-c(30:999),]
# convert n/a to NA
initial_phenotype_measurement_df[initial_phenotype_measurement_df == "n/a"] <- NA
final_phenotype_measurement_df[final_phenotype_measurement_df == "n/a"] <- NA
# ordinal columns
ordinal_columns <- c(6:16,22,38,44)
# nominal columns
nominal_columns <- c(39:43)
# continuous columns
continuous_columns <- c(17:21,23:27,28:32,33:37)
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_df)[1], ncol = dim(initial_phenotype_measurement_df)[2])
# concatenate column names into the columns object
columns<-c(colnames(final_phenotype_measurement_df))
# add the column names to the results_matrix
colnames(results_matrix) <- columns
colnames(results_matrix)
for (i in 1:nrow(initial_phenotype_measurement_df)) {
results_matrix[i,nominal_columns] <- sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
}
results_matrix[,nominal_columns]
results_matrix[,nominal_columns]
sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
View(sort(as.double(initial_phenotype_measurement_df[,nominal_columns]), na.last = TRUE))
sort(as.double(initial_phenotype_measurement_df[,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
as.vector(sort(as.double(initial_phenotype_measurement_df[,nominal_columns]), na.last = TRUE))
sort(as.vector(initial_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[1,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[2,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[3,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[15,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[15,nominal_columns]), na.last = TRUE)
sort(as.double(final_phenotype_measurement_df[16,nominal_columns]), na.last = TRUE)
sort(as.double(initial_phenotype_measurement_df[16,nominal_columns]), na.last = TRUE)
for (i in 1:nrow(initial_phenotype_measurement_df)) {
results_matrix[i,nominal_columns] <- sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
}
results_matrix[i,nominal_columns]
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
# vectorize the true or false parameters by comparing the lenticel shape columns between both matrices
results_matrix[,ordinal_columns] <- initial_phenotype_measurement_df[,ordinal_columns] == final_phenotype_measurement_df[,ordinal_columns]
results_matrix[,ordinal_columns]
for (i in 1:nrow(initial_phenotype_measurement_df)) {
results_matrix[i,nominal_columns] <- sort(as.double(initial_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE) == sort(as.double(final_phenotype_measurement_df[i,nominal_columns]), na.last = TRUE)
}
# for loop that iterates through the various columns
for (i in 1:29) {
results_matrix[i, 17:21] <- sort(as.double(initial_phenotype_measurement_df[i,17:21]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,17:21]), na.last = TRUE)
results_matrix[i, 23:27] <- sort(as.double(initial_phenotype_measurement_df[i,23:27]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,23:27]), na.last = TRUE)
results_matrix[i, 28:32] <- sort(as.double(initial_phenotype_measurement_df[i,28:32]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,28:32]), na.last = TRUE)
results_matrix[i, 33:37] <- sort(as.double(initial_phenotype_measurement_df[i,33:37]), na.last = TRUE) - sort(as.double(final_phenotype_measurement_df[i,33:37]), na.last = TRUE)
}
# all the true false statements were turned to 1's and 0's after calling the  for loop. so we will want to change the matrix to a dataframe.
results_df <- data.frame(results_matrix)
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,ordinal_columns] <- results_df[,ordinal_columns] == 1
results_df[,ordinal_columns]
results_df[,nominal_columns]
# converting all the 1 and 0 values to TRUE or FALSE with boolean phrase
results_df[,c(ordinal_columns, nominal_columns)] <- results_df[,c(ordinal_columns,nominal_columns)] == 1
results_df[,c(ordinal_columns, nominal_columns)]
results_df
col_names(results_df)
colnames(results_df)
results_df
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
for (i in 1:length(nominal_columns)) {
col_index <- nominal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
nominal_columns
length(nominal_columns)
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
for (i in 1:length(nominal_columns)) {
col_index <- nominal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
categorical_table_results
for (i in 1:length(nominal_columns)) {
col_index <- nominal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
length(ordinal_columns)
ordinal_columns
nominal_columns
# approaches to creating the true/false table IN PROGRESS
categorical_table_results <- matrix(nrow = length(ordinal_columns), ncol = 2)
for (i in 1:length(nominal_columns)) {
col_index <- nominal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]]))
}
categorical_table_results
for (i in 1:length(nominal_columns)) {
col_index <- nominal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- 100 * (sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]])))
}
categorical_table_results
for (i in 1:length(ordinal_columns)) {
col_index <- ordinal_columns[i]  # Get the actual column index
categorical_table_results[i,1] <- colnames(results_df)[col_index]  # Store column name
categorical_table_results[i,2] <- 100 * (sum(results_df[[col_index]], na.rm = TRUE) / sum(!is.na(results_df[[col_index]])))
}
categorical_table_results
