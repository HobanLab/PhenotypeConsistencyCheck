fscReadParamEst(arpFileslist)
fscReadParamEst(arpFileslist)
fscBlock_microsat(num.loci = 25)
fscBlock_microsat(num.loci = 25, mut.rate = 0)
fscBlock_microsat(arpFileslist, num.loci = 25, mut.rate = 0)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
parObject <- fscReadParamEst(parFilepath)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscReadParamEst(parFilepath)
fscSettingsEst(parFilepath)
fscEstParam(parFilepath)
fscSettingsEst(parFilepath)
fscEstParam(parFilepath)
load("C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscSettingsEst(parFilepath)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscEstParam(parFilepath)
fscSettingsEst(parFilepath)
parObject <- fscReadParamEst(parFilepath)
fscDeme(parFilepath, deme.size = 1000)
fscDeme(parFilepath, deme.size = 1000, num.loci = 25)
arpObject
fscDeme(parFilepath, deme.size )
rm(list = ls())
library(strataG)
library(adegenet)
# %%%STRATAG APPROACH ----
# Specify the filepath to the Arlequin file in question
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
fscDeme(parFilepath, deme.size )
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscDeme(parFilepath, deme.size )
fscDeme(parFilepath)
fscDeme(parFilepath, sample.size = )
genindObject[[1]]
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
fscDeme(parFilepath, deme.size = 2400)
deme0 <- fscDeme(parFilepath, deme.size = 2400)
fscSettingsDemes(deme0)
demes <- fscSettingsDemes(deme0)
fscBlock_microsat(num.loci = 25, mut.rate = 0)
fscWrite(demes = demes, label ="updatedMSAT_04pop_migLow.par")
fscWrite(demes = demes, genetics = NA, label ="updatedMSAT_04pop_migLow.par")
fscSettingsGenetics(msats)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
fscWrite(demes = demes, genetics = genetics,label ="updatedMSAT_04pop_migLow.par")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow.par")
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
print(str(updatedMSAT_04pop_migLow.params))
rm(list = ls())
library(strataG)
library(adegenet)
# %%%STRATAG APPROACH ----
# Specify the filepath to the Arlequin file in question
arpFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/MSAT_04pop_migLow/"
arpFiles <- list.files(path = arpFilepath, pattern = ".arp", full.names =  TRUE)
arpFileslist <- list(arpFiles)
# Read in the Arlequin file using read.arlequin
arpObject <- lapply(arpFileslist[[1]], arlequinRead)
# Convert the Arlequin object to a gtypes object
gTypeObject <- list()
genindObject <- list()
locivec <- vector()
meanLocivec <- vector()
Allelevec <- vector()
meanAllelevec <- vector()
for (i in 1:length(arpObject)) {
gTypeObject[[i]] <- arp2gtypes(arpObject[[i]])
genindObject[[i]] <- gtypes2genind(gTypeObject[[i]])
locivec[i] <- c(sum(nLoc(genindObject[[i]])))
meanLocivec <- mean(locivec)
Allelevec[i] <- c(sum(nAll(genindObject[[i]])))
meanAllelevec <- mean(Allelevec)
}
meanLocivec
meanAllelevec
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
genetics <- fscSettingsGenetics(msats)
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
parFilepath <- "C:/Users/gsalas/Desktop/fsc28_win64/RaMP_SimulationIntro_DemoParFiles/MSAT_04pop_migLow.par"
deme0 <- fscDeme(parFilepath, deme.size = 2400)
demes <- fscSettingsDemes(deme0)
msats <- fscBlock_microsat(num.loci = 25, mut.rate = 0)
msats
genetics <- fscSettingsGenetics(msats)
genetics
updatedMSAT_04pop_migLow.params <- fscWrite(demes = demes, genetics = genetics, label ="updatedMSAT_04pop_migLow")
####
# 02/10/2025
####
sim.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck"
sim.wd
rm(sim.wd)
sim.wd
####
# 02/10/2025
####
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck"
phenotype.wd
setwd(phenotype.wd)
getwd
getwd()
2025_01_22_blind_consistency_check
readxl::read_xlsx("2025_01_22_blind_consistency_check.xlsx")
####
# 02/10/2025
####
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
getwd()
read.csv("2025_01_22_blind_consistency_check.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
view(intial_phenotype_measurement_matrix)
View(intial_phenotype_measurement_matrix)
View(intial_phenotype_measurement_matrix)
intial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
View(intial_phenotype_measurement_matrix)
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
View(final_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
dim(initial_phenotype_measurement_matrix)
dim(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix == final_phenotype_measurement_matrix
dim(initial_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix[1, 1]
initial_phenotype_measurement_matrix[1, 50]
initial_phenotype_measurement_matrix[1, 23]
initial_phenotype_measurement_matrix[1, 20]
dimnames(initial_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix[1,1]
initial_phenotype_measurement_matrix[1,0]
initial_phenotype_measurement_matrix[,0]
initial_phenotype_measurement_matrix[2,0]
initial_phenotype_measurement_matrix[2,2]
initial_phenotype_measurement_matrix[2,2] == final_phenotype_measurement_matrix[2,2]
initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
dim(initial_phenotype_measurement_matrix)
dim(initial_phenotype_measurement_matrix)[2]
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix[1]), ncol = dim(initial_phenotype_measurement_matrix)[2])
results_matrix
initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
final_phenotype_measurement_matrix [,2] <- initial_phenotype_measurement_matrix[1:29,2] == final_phenotype_measurement_matrix[1:29,2]
final_phenotype_measurement_matrix [,2] <- initial_phenotype_measurement_matrix[,2] == final_phenotype_measurement_matrix[,2]
final_phenotype_measurement_matrix[,2]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
final_phenotype_measurement_matrix[5,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[5,6] == final_phenotype_measurement_matrix[5,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] = final_phenotype_measurement_matrix[,6]
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix[1]), ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
View(initial_phenotype_measurement_matrix)
View(final_phenotype_measurement_matrix)
# testing the true or false parameters by comparing the second column
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
source("~/PhenotypeConsistencyCheck/ConsistencyCheck.R", echo=TRUE)
source("~/PhenotypeConsistencyCheck/ConsistencyCheck.R", echo=TRUE)
results_matrix[,6] <- initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
results_matrix[,6]
results_matrix[,6] <- initial_phenotype_measurement_matrix[1:29,6] == final_phenotype_measurement_matrix[1:29,6]
results_matrix[1:29,6] <- initial_phenotype_measurement_matrix[1:29,6] == final_phenotype_measurement_matrix[1:29,6]
results_matrix[1:29,6]
dim(initial_phenotype_measurement_matrix[1])
dim(initial_phenotype_measurement_matrix[2])
dim(initial_phenotype_measurement_matrix[,1])
dim(initial_phenotype_measurement_matrix[,2])
dim(initial_phenotype_measurement_matrix[3])
dim(initial_phenotype_measurement_matrix[4])
dim(initial_phenotype_measurement_matrix[55])
dim(initial_phenotype_measurement_matrix)
dim(initial_phenotype_measurement_matrix[1][2])
dim(initial_phenotype_measurement_matrix[1],[2])
?dim
dim(initial_phenotype_measurement_matrix[2])
dim(initial_phenotype_measurement_matrix[1])
dim(initial_phenotype_measurement_matrix)[1]
dim(initial_phenotype_measurement_matrix)[2]
results_matrix
dim(results_matrix)
dim(initial_phenotype_measurement_matrix)[1]
dim(initial_phenotype_measurement_matrix)[2]
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
results_matrix
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
results_matrix[1:29,6] <- initial_phenotype_measurement_matrix[1:29,6] == final_phenotype_measurement_matrix[1:29,6]
results_matrix[1:29,6]
results_matrix[,6]
for (x in 1:length(dim(initial_phenotype_measurement_matrix)[1])) {
for (y in 1:length(dim(initial_phenotype_measurement_matrix)[2])) {
results_matrix[,]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
results_matrix
results_matrix[1:29,1]
results_matrix[1:29,6]
initial_phenotype_measurement_matrix[,6]
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
View(initial_phenotype_measurement_matrix)
View(final_phenotype_measurement_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
initial_phenotype_measurement_matrix[,6] ==
]
initial_phenotype_measurement_matrix[,6]
# ordinal columns
ordinal_columns <- 6:7|11
ordinal_columns
# ordinal columns
ordinal_columns <- 6:7,11
6:7|11
ordinal_columns
?|
|
:
(6:7|11)
ordinal<-(6:7|11)
ordinal
1:10
1:10|5
final_phenotype_measurement_matrix[6:7|11]
# ordinal columns
ordinal_columns <- final_phenotype_measurement_matrix[6:7|11][2]
final_phenotype_measurement_matrix[6:7|11][2]
final_phenotype_measurement_matrix[6:7|11][1]
ordinal_columns <- final_phenotype_measurement_matrix[6:7|11][1]
ordinal_columns
ordinal_columns <- final_phenotype_measurement_matrix[6:7|11][2]
ordinal_columns
dims(ordinal_columns)
dim(ordinal_columns)
final_phenotype_measurement_matrix[6:7|11][2]
View(final_phenotype_measurement_matrix[6:7|11][2])
final_phenotype_measurement_matrix[,6:7|11]
View(final_phenotype_measurement_matrix[,6:7|11])
View(final_phenotype_measurement_matrix[,[6:7|11]])
View(final_phenotype_measurement_matrix[2][6:7])
View(final_phenotype_measurement_matrix)[2]
View(final_phenotype_measurement_matrix)[2][6:11]
View(final_phenotype_measurement_matrix)[2][6]
final_phenotype_measurement_matrix[,6:7]
final_phenotype_measurement_matrix[,6:7]
final_phenotype_measurement_matrix[1:29,6:7]
final_phenotype_measurement_matrix[1:29,6|7]
final_phenotype_measurement_matrix[[2]]
final_phenotype_measurement_matrix[[1]]
final_phenotype_measurement_matrix[1]
final_phenotype_measurement_matrix[,5]
final_phenotype_measurement_matrix[1:29,5]
final_phenotype_measurement_matrix[1:29,6]
final_phenotype_measurement_matrix[1:30,6]
final_phenotype_measurement_matrix[1:29,6]
dim(final_phenotype_measurement_matrix)[2]
dim(final_phenotype_measurement_matrix)[2][6]
dim(final_phenotype_measurement_matrix)[2][[6]]
dim(final_phenotype_measurement_matrix)[2][,6
]
dim(final_phenotype_measurement_matrix)[2][,6]
dim(final_phenotype_measurement_matrix[6])[2]
dim(final_phenotype_measurement_matrix[3])[2]
dim(final_phenotype_measurement_matrix[4])[2]
object <- 1,2,5
object <- 1:2,5
object <- '1:2,5
''
]
for (x in 1:length(dim(initial_phenotype_measurement_matrix)[1])) {
for (y in 1:length(dim(initial_phenotype_measurement_matrix)[2])) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
""
''''
object <- '1:2,5'
object
ordinal_columns <- c(6,7,11)
is.na(initial_phenotype_measurement_matrix[1:29,6])
is.na(initial_phenotype_measurement_matrix[1:29,7])
is.na(initial_phenotype_measurement_matrix[1:29,11])
is.n/a(initial_phenotype_measurement_matrix[1:29,11])
ordinal_columns
# ordinal columns
ordinal_columns <- c(6,7,11)
for (x in 1:29) {
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
results_matrix
results_matrix[1:29,]
results_matrix[1:29,6] <- initial_phenotype_measurement_matrix[1:29,6] == final_phenotype_measurement_matrix[1:29,6]
results_matrix[1:29,6]
View(results_matrix[1:29,6]) <- initial_phenotype_measurement_matrix[1:29,6] == final_phenotype_measurement_matrix[1:29,6]
View(results_matrix[1:29,6])
results_matrix[1:29, 6]
# outer loop iterates through rows
for (x in 1:29) {
# inner loop iterates through columns
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
ordinal_columns
results_matrix
# outer loop iterates through rows
for (x in 1:29) {
# inner loop iterates through columns
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
results_matrix[1:29,]
results_matrix[1:29,ordinal_columns]
# ordinal columns
ordinal_columns <- c(6,7,11:16)
ordinal_columns
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
# outer loop iterates through rows
for (x in 1:29) {
# inner loop iterates through columns
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
results_matrix[1:29,ordinal_columns]
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
# ordinal columns
ordinal_columns <- c(6,7,11:16)
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
initial_phenotype_measurement_matrix
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dim(initial_phenotype_measurement_matrix)
# testing the true or false parameters by comparing the lenticel shape columns between both matrices
initial_phenotype_measurement_matrix[,6] == final_phenotype_measurement_matrix[,6]
# outer loop iterates through rows
for (x in 1:29) {
# inner loop iterates through columns
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
results_matrix[1:29,ordinal_columns]
dim(initial_phenotype_measurement_matrix)
source("~/PhenotypeConsistencyCheck/ConsistencyCheck.R", echo=TRUE)
# this script outputs a matrix of 30 rows and 50 columns of continuous and categorical
# data as a result of comparing initial and final measurements of two matrices
# Create objects ----
phenotype.wd <- "C:/Users/gsalas/Documents/PhenotypeConsistencyCheck/"
setwd(phenotype.wd)
initial_phenotype_measurement_matrix <- read.csv("butternut_hybrid_spreadsheet_Salas.csv")
final_phenotype_measurement_matrix <- read.csv("2025_01_22_blind_consistency_check.csv")
# ordinal columns
ordinal_columns <- c(6,7,11:16)
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
# check the column names of both matrices
dimnames(initial_phenotype_measurement_matrix)
dimnames(final_phenotype_measurement_matrix)
dim(initial_phenotype_measurement_matrix)
ncol(initial_phenotype_measurement_matrix)
matrix(nrow(initial_phenotype_measurement_matrix), ncol(initial_phenotype_measurement_matrix))
nrow(initial_phenotype_measurement_matrix)
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = nrow(initial_phenotype_measurement_matrix), ncol(initial_phenotype_measurement_matrix))
results_matrix
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = nrow(initial_phenotype_measurement_matrix), ncol = ncol(initial_phenotype_measurement_matrix))
results_matrix
# continous columns
# Create a matrix that will store the percent change and true or false statements
# and soft code the values for the rows and columns
results_matrix <- matrix(nrow = dim(initial_phenotype_measurement_matrix)[1], ncol = dim(initial_phenotype_measurement_matrix)[2])
results_matrix
continuous_columns <- c(17:21,23:36,38:42)
continuous_columns
for (i in 1:29) {
for (j in continuous_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
for (i in 1:29) {
for (j in continuous_columns) {
results_matrix[i,j]<- initial_phenotype_measurement_matrix[i,j] == final_phenotype_measurement_matrix[i,j]
}
}
results_matrix[1:29, continuous_columns]
results_matrix[1:29,]
is.matrix(results_matrix)
View(results_matrix)
# outer loop iterates through rows
for (x in 1:29) {
# inner loop iterates through columns
for (y in ordinal_columns) {
results_matrix[x,y]<- initial_phenotype_measurement_matrix[x,y] == final_phenotype_measurement_matrix[x,y]
}
}
for (i in 1:29) {
for (j in continuous_columns) {
results_matrix[i,j]<- initial_phenotype_measurement_matrix[i,j] - final_phenotype_measurement_matrix[i,j]
}
}
for (i in 1:29) {
for (j in continuous_columns) {
results_matrix[i,j]<- initial_phenotype_measurement_matrix[i,j] - final_phenotype_measurement_matrix[i,j]
}
}
